<?php

use Drupal\block_content\Entity\BlockContent;
use Drupal\block\Entity\Block;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;

// Globals
$GLOBALS["cookie_name"] = 'CookieConsent';

/**
 * Implement hook_theme()
 *
 * This function tells each theme template what variables they can use
 *
 * @param array $existing
 * @param string $type
 * @param string $theme
 * @param string $path
 * @return array
 */
function cookiebar_theme($existing, $type, $theme, $path)
{
    // This defines the variables that will be useable in the templates
    return array(
        'cookiebar' => array(
            'variables' => array(
                'label' => null,
                'cookies' => null,
                'text' => null,
                'accept_button_text' => null,
                'decline_button_text' => null,
            ),
        ),
        'cookiebar_advanced' => array(
            'variables' => array(
                'label' => null,
                'cookies' => null,
                'text' => null,
                'accept_button_text' => null,
                'decline_button_text' => null,
            ),
        ),
    );
}

/**
 * Implement hook_install()
 * Will Add a block to content of current theme when installing the plugin
 *
 * @return void
 */
function cookiebar_install()
{
    // Add block to content on module install
    $cur_theme = \Drupal::config('system.theme')->get('default');
    if (!empty($cur_theme)) {
        $cookiebarBlock = Block::create([
            'id' => 'cookiebar_block',
            'plugin' => 'cookiebar_block',
            'region' => 'content',
            'weight' => 99,
            'theme' => $cur_theme,
            'settings' => [
                'label' => 'Cookiebar Block',
                'label_display' => false,
            ],
        ]);
        $cookiebarBlock->save();
    }

    // (Re)set saved config. This is sometimes cached in some wierd way...
    $config_file = \file_get_contents(DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('cookiebar') . "/config/install/cookiebar.settings.yml");
    $parsed = \Symfony\Component\Yaml\Yaml::parse($config_file);
    $config = \Drupal::configFactory()->getEditable('cookiebar.settings');
    $config->setData($parsed);
    $config->save(true);
}

/**
 * Implement hook_page_attachments
 *
 * Attach a stylesheet to all admin pages.
 *
 * @param array $attachments
 * @return void
 */
function cookiebar_page_attachments(array &$attachments)
{
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
    if ($is_admin) {
        $attachments['#attached']['library'][] = 'cookiebar/cookiebar-css-admin';
        return;
    }
}

/**
 * Implement hook_preprocess
 *
 * Add a variable to all pages
 *
 * @param array $variables
 * @return void
 */
function cookiebar_preprocess(&$variables)
{
    $variables['cookie_value'] = GetCookieValue();
}

/**
 * Implement hook_preprocess_html
 *
 * Add some configuration to the javascript library
 *
 * @param array $variables
 * @return void
 */
function cookiebar_preprocess_html(&$variables)
{
    $config = \Drupal::configFactory()->getEditable('cookiebar.settings');
    $cookiepage_path = $config->get('cookiebar.cookiepage_path');
    if (empty($cookiepage_path)) {
        $cookiepage_path = "/cookies";
        $config->set('cookiebar.cookiepage_path', $cookiepage_path);
        $config->save();
    }

    $current_language = Drupal::languageManager()->getCurrentLanguage();
    $default_lang = Drupal::languageManager()->getDefaultLanguage();
    $homeUrl = Url::fromRoute('<front>', [], ['language' => $current_language]);
    $currentUrl = Url::fromRoute('<current>', [], ['language' => $default_lang]);

    $variables['#attached']['drupalSettings']['cookiebarConfig'] = array(
        'cookiepagePath' => $cookiepage_path,
        'homeUrl' => $homeUrl->toString(),
        'currentUrl' => $currentUrl->toString(),
    );
}

/**
 * Implement hook_menu_local_tasks_alter
 *
 * Alter the local tasks based on the cookiebar_type
 *
 * @param array $data
 * @param string $route_name
 * @return void
 */
function cookiebar_menu_local_tasks_alter(&$data, $route_name)
{
    $config = \Drupal::config('cookiebar.settings');
    $cookiebar_type = $config->get('cookiebar.cookiebar_type');

    if ($cookiebar_type === "0") {
        unset($data['tabs'][0]['cookiebar.config']);
    }
}

/**
 * Implements hook_theme_suggestions_HOOK()
 *
 * Add template suggestion for cookiebar_default
 *
 * @param array $variables
 * @return array
 */
function cookiebar_theme_suggestions_cookiebar(array $variables) : array
{
    return array('cookiebar_default');
}

/**
 * Implement helper function GetCookieValue()
 *
 * to get the value of the cookie set by this module
 *
 * @return array|string|bool
 */
function GetCookieValue()
{
    $cookie_value = \Drupal::request()->cookies->get($GLOBALS["cookie_name"]);

    if (isJSON($cookie_value)) {
        // For (advanced) cookieblock
        return json_decode($cookie_value, true);
    } else {
        // For (deafult) cookiebar
        return $cookie_value;
    }

    return false;
}

/**
 * Implement helper function isJSON()
 *
 * @param unknown $string
 * @return bool
 */
function isJSON($string) : bool
{
    return is_string($string) && is_array(json_decode($string, true)) ? true : false;
}
